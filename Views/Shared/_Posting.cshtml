
@model IEnumerable<ProjectMVC.Models.PostDto>

<div class="mt-8 flex flex-col gap-10 pb-16">
    <div class="flex flex-col gap-10">
        @foreach (var post in Model)
        {
            <div class="mt-16">
                <div class="mx-auto w-full max-w-[90%] rounded-xl outline outline-1 outline-gray-300 lg:max-w-[60%] 2xl:max-w-[50%]">
                    <div class="aspect-[4/3] overflow-hidden rounded-t-lg">
                        <img src="@post.ImageFile" alt="Post Image" width="600" height="400" class="h-full w-full object-cover" style="aspect-ratio: 600 / 400; object-fit: cover;">
                    </div>
                    <div class="rounded-b-lg bg-card p-4 dark:bg-white">
                        <div class="mb-4 flex items-center justify-between">
                            <div class="flex items-center gap-2">
                                @if(string.IsNullOrEmpty(post.ProfilePicture))
                                {
                                    <span class="relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full">
                                        <span class="flex h-full w-full items-center justify-center rounded-full bg-muted">@post.User.Substring(0, 2).ToUpper()</span>
                                    </span>
                                }
                                else
                                {
                                    <img src="@post.ProfilePicture" alt="Pic" class="h-10 w-10 rounded-full" />
                                }
                                <div>
                                    <div class="font-medium">@post.User</div>
                                    <div class="text-sm text-muted-foreground">@DateTime.UtcNow.ToString("M/d/yyyy, h:mm:ss tt")</div>
                                </div>
                            </div>
                        </div>
                        <div class="mb-4">
                            <h2 class="text-l">@post.Title</h2>
                        </div>
                        <div class="flex flex-col gap-2">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-2">
                                    <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-9 w-9 like-button">
                                        <svg class="h-4 w-4 heart-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path></svg>
                                        <span class="sr-only">Like</span>
                                    </button>
                                    <button class="comment-button inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-9 w-9" type="button" aria-haspopup="dialog" aria-expanded="false" data-state="closed">
                                        <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z"></path></svg>
                                        <span class="sr-only">View Comments</span>
                                    </button>
                                    @if(User.Identity.IsAuthenticated)
                                    {
                                        <div class="relative inline-block text-left">
                                            <button class="dropdown-button comment-button inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-9 w-9" type="button" aria-haspopup="true" aria-expanded="false">
                                                <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                    <circle cx="3" cy="12" r="2" fill="currentColor"></circle>
                                                    <circle cx="12" cy="12" r="2" fill="currentColor"></circle>
                                                    <circle cx="21" cy="12" r="2" fill="currentColor"></circle>
                                                </svg>
                                                <span class="sr-only">Options</span>
                                            </button>
                                            <div class="dropdown-menu absolute right-0 mt-2 w-48 bg-white border border-gray-300 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden">
                                                <div class="py-1">

													<button class="edit-post-button text-gray-700 hover:bg-gray-200 rounded-md mx-1 block px-4 py-2 text-sm w-full text-left" data-id="@post.Id" data-title="@post.Title">
													Edit	
													</button>

                                                    <form asp-controller="Post" asp-action="Delete" method="post">
                                                        <input type="hidden" name="id" value="@post.Id" />
                                                        <button type="submit" class="text-gray-700 hover:bg-gray-200 rounded-md mx-1 block px-4 py-2 text-sm w-full text-left">Delete</button>
                                                    </form>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="text-sm font-medium">
                                    <span class="text-primary">@post.LikesCount</span> likes
                                </div>
                            </div>
                        </div>
                        <div class="border-t border-gray-300 my-4"></div>
                        <div class="mt-4 space-y-2">
                            @if (post.Comments == null || post.Comments.Count == 0)
                            {
                                <p class="text-sm text-muted-foreground">No comments yet.</p>
                            }
                            else
                            {
                                @foreach (var comment in post.Comments.Take(5))
                                {
                                    <div class="z-20 flex items-center justify-between gap-2">
                                        <div class="flex items-center gap-2">
                                            @if(string.IsNullOrEmpty(comment.ProfilePicture))
                                            {
                                                <span class="relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full">
                                                    <span class="flex h-full w-full items-center justify-center rounded-full bg-muted">@comment.User.Substring(0, 2).ToUpper()</span>
                                                </span>
                                            }
                                            else
                                            {
                                                <img src="@comment.ProfilePicture" alt="Pic" class="h-10 w-10 rounded-full" />
                                            }
                                            <div>
                                                <a class="mr-2 font-medium" href="/#">@comment.User</a>@comment.Content
                                            </div>
                                        </div>
                                    @if(User.Identity.IsAuthenticated && comment.CanEdit)
                                        {
                                            <form asp-controller="Comment" asp-action="Delete" method="post">
                                                <input type="hidden" name="id" value="@comment.Id" />
												<h1>@comment.Id</h1>
												<button class="p-2 rounded group">
												  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5 stroke-black group-hover:stroke-red-500">
													<path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
												  </svg>
												</button>
                                            </form>
											}
                                    </div>
                                }
								@if(post.Comments.Count() > 5)
								{
									<div class="flex items-center space-x-2 mt-6">
										<div class="text-gray-500 text-sm"><a href="@Url.Action("Login", "Auth")" class="text-blue-500 hover:underline">See all comments</a></div>
									</div>
								}
                            }
                        </div>
                        @if(User.Identity.IsAuthenticated && post.CanChangePost)
                        {
                            <form asp-controller="Comment" asp-action="Create" method="post" class="flex items-center space-x-2 mt-6">
                                <input type="hidden" name="postId" value="@post.Id" />
                                <input 
                                    type="text" 
                                    name="content"
                                    placeholder="Write your comment..." 
                                    class="flex-grow rounded-lg border border-gray-300 p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    required
                                />
                                <button 
                                    type="submit"
                                    class="rounded-lg dark:bg-gray-700 bg-gray-700 px-4 py-2 text-white hover:bg-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                >
                                    Post
                                </button>
                            </form>
                        }
                        else
                        {
                            <div class="flex items-center space-x-2 mt-6">
                                <div class="text-gray-500 text-sm">Please <a href="@Url.Action("Login", "Auth")" class="text-blue-500 hover:underline">login</a> to comment</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if (!ViewData.ModelState.IsValid)
{
<div id="validation-summary" class="fixed top-[0.4rem] left-1/2 transform -translate-x-1/2 -translate-y-full opacity-0 z-50 w-auto max-w-screen rounded-lg bg-red-500 p-4 text-center text-white shadow-lg transition-all duration-500 ease-out font-bold whitespace-nowrap">
        @Html.ValidationSummary(false)
</div>
}

<!-- Dims background when creating post! -->
<div id="overlay-edit" class="hidden fixed inset-0 bg-black bg-opacity-50"></div>

<!-- Form for creating post! -->
<div id="edit-post-form" class="fixed inset-0 items-center justify-center top-[19rem] left-1/2 transform -translate-x-1/2 hidden bg-white dark:bg-gray-800 p-4 shadow-md border border-gray-200 dark:border-gray-700 rounded-md w-[27rem] h-[17.5rem] z-10">

	<h1 class="block dark:text-gray-300 text-center font-bold mb-4 text-xl">Edit Post</h1>
    <form asp-controller="Post" asp-action="Edit" method="post" enctype="multipart/form-data">
		<input type="hidden" id="post-id" name="id"/>
            <button type="button" id="cancel-edit-post" class="absolute top-0 right-2 text-lg text-gray-700 rounded-md p-1">
                &times;
            </button>
        <div class="mb-4">
            <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">New Title</label>
			<input type="text" id="title" name="Title" required class="rounded-lg border border-gray-300 w-full px-4 py-1 focus:outline-none focus:ring-2 focus:ring-blue-400 dark:border-white dark:bg-secondary">
        </div>
        <div class="mb-6">
            <label for="imageFile" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">New Image</label>
			<input type="file" id="imageFile" name="ImageFile" accept="image/*" class="rounded-lg border border-gray-300 w-full px-4 py-1 dark:border-white dark:bg-secondary text-gray-700 file:border-0 file:text-sm file:font-medium file:bg-white cursor-pointer dark:bg-white dark:text-black">
        </div>
        <div class="flex justify-center gap-2">
            <button type="submit" class="w-full px-4 py-2 text-sm font-medium text-white bg-gray-700 rounded-md shadow-sm hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-white">
                Edit Post
            </button>
        </div>
    </form>
</div>

<script>

document.addEventListener('DOMContentLoaded', function () {


    // Like Button Logic
    const likeButtons = document.querySelectorAll('.like-button');
    likeButtons.forEach(button => {
        button.addEventListener('click', function () {
            this.classList.toggle('liked');
            const heartIcon = this.querySelector('.heart-icon');

            if (this.classList.contains('liked')) {
                heartIcon.style.fill = '#ec4899';
                heartIcon.style.stroke = '#ec4899';

                this.classList.add('pulsing');
                setTimeout(() => {
                    this.classList.remove('pulsing');
                }, 3000);
            } else {
                heartIcon.style.fill = 'none';
                heartIcon.style.stroke = 'currentColor';
            }

            heartIcon.style.animation = 'none';
            heartIcon.offsetHeight;
            heartIcon.style.animation = null;
        });
    });

    // Comment Button Logic
    const commentButtons = document.querySelectorAll('.comment-button');
    const commentsDialog = document.getElementById('commentsDialog');
    const closeCommentsDialog = document.getElementById('closeCommentsDialog');

    if (commentButtons.length && commentsDialog && closeCommentsDialog) {
        commentButtons.forEach(button => {
            button.addEventListener('click', function () {
                const postId = this.getAttribute('data-post-id');
                commentsDialog.classList.remove('hidden');
                commentsDialog.classList.add('flex');
            });
        });

        closeCommentsDialog.addEventListener('click', function () {
            commentsDialog.classList.add('hidden');
            commentsDialog.classList.remove('flex');
        });

        commentsDialog.addEventListener('click', function (event) {
            if (event.target === this) {
                this.classList.add('hidden');
                this.classList.remove('flex');
            }
        });
    }

    // Dropdown Logic
    const dropdowns = document.querySelectorAll('.relative.inline-block');

    dropdowns.forEach(dropdown => {
        const button = dropdown.querySelector('.dropdown-button');
        const menu = dropdown.querySelector('.dropdown-menu');

        button.addEventListener('click', function (event) {
            event.stopPropagation();
            const isVisible = !menu.classList.contains('hidden');

            document.querySelectorAll('.dropdown-menu:not(.hidden)').forEach(openMenu => {
                if (openMenu !== menu) {
                    openMenu.classList.add('hidden');
                    openMenu.previousElementSibling.setAttribute('aria-expanded', 'false');
                }
            });

            menu.classList.toggle('hidden');
            button.setAttribute('aria-expanded', (!isVisible).toString());
        });
    });

    document.addEventListener('click', function (event) {
        if (!event.target.closest('.relative.inline-block')) {
            document.querySelectorAll('.dropdown-menu:not(.hidden)').forEach(menu => {
                menu.classList.add('hidden');
                menu.previousElementSibling.setAttribute('aria-expanded', 'false');
            });
        }
    });

// Create Post and Cancel Post Logic
const editPostButton = document.querySelectorAll(".edit-post-button");
const cancelPostButton = document.getElementById("cancel-edit-post");
const form = document.getElementById("edit-post-form");
const overlay = document.getElementById("overlay-edit");
	const postIdInput = document.getElementById("post-id");
const titleInput = document.getElementById("title");

if (editPostButton && cancelPostButton && form && overlay) {


    // Add click event listener to each create post button
    editPostButton.forEach(button => {
        button.addEventListener('click', function(){

			const postId = this.getAttribute("data-id");
			const postTitle = this.getAttribute("data-title");

            postIdInput.value = postId;
            titleInput.value = postTitle;

            form.classList.toggle("hidden");
            overlay.classList.toggle("hidden");
        });
    });

    // Add event listener to cancel button
    cancelPostButton.addEventListener("click", function () {
        form.classList.add("hidden");
        overlay.classList.add("hidden");
    });

    // Add event listener to overlay
    overlay.addEventListener("click", function () {
        form.classList.add("hidden");
        overlay.classList.add("hidden");
    });
}

});

</script>
